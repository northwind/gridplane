<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   width="{ hardstand.columns * hardstand.cellWidth }" height="{ hardstand.rows* hardstand.cellHeight }" 
				   dropShadowVisible="true" 
				   backgroundAlpha="0" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   click="bordercontainer1_clickHandler(event)" 
				   addedToStage="bordercontainer1_addedToStageHandler(event)" 
				   rollOut="bordercontainer1_rollOutHandler(event)" 
				   mouseMove="bordercontainer1_mouseMoveHandler(event)" 				    
				   xmlns:layers="layers.*">
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import models.Hardstand;
			import mx.core.UIComponent;
			import layers.PlaneLayer;
			
			[Inject]
			public var planeLayer:PlaneLayer;

			[Inject]
			[Bindable]
			public var hardstand:Hardstand;
			
			protected function bordercontainer1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}

			private var oldX:int;
			private var oldY:int;
			private var setMirror:Boolean = false;
			
			protected function bordercontainer1_mouseMoveHandler(event:MouseEvent):void
			{
				if ( planeLayer.flying ){
					var x:int = (this.mouseX - planeLayer.planeBitmap.width / 2) / hardstand.cellWidth;
					var y:int = (this.mouseY - planeLayer.planeBitmap.height/ 2) / hardstand.cellHeight;
					
					//坐标值更改了
					if ( oldX != x || oldY != y ){
						oldX = x;
						oldY = y;
						
						//如果超出边界
						if ( ((x + 5) > hardstand.columns) || ((y + 4) > hardstand.rows) ){
							mirror.visible = false;
						}else{
							if ( !setMirror ){
								setMirror = true;
								mirror.source = new Bitmap( planeLayer.planeBitmap.bitmapData.clone() );
							}
							
							mirror.x = x * hardstand.cellWidth;
							mirror.y = y * hardstand.cellHeight;
							if ( mirror.visible == false )
								mirror.visible = true;
						}
					}
					
				} else {
					mirror.visible = false;
				}
			}

			protected function bordercontainer1_addedToStageHandler(event:Event):void
			{
				dispatchEvent(new Event('configureIOC', true));
				
				planeLayer.addEventListener(Event.CANCEL, onPlaneCancel );
			}
			
			private function onPlaneCancel( event:Event ):void
			{
				mirror.visible = false;
				setMirror = false;
			}

			protected function bordercontainer1_rollOutHandler(event:MouseEvent):void
			{
				mirror.visible = false;
				setMirror = false;
			}

		]]>
	</fx:Script>
	
    <s:BorderContainer backgroundColor="0x333333" backgroundAlpha="0.5"
					   width="100%" height="100%" />
	
	
	<layers:LineLayer width="100%" height="100%" cellHeight="{hardstand.cellHeight}" cellWidth="{hardstand.cellWidth}"
					 columns="{hardstand.columns}" rows="{hardstand.rows}" id="lineLayer" />
	
	<mx:Image id="mirror" alpha="0.5" visible="false" />
	
</s:BorderContainer>
