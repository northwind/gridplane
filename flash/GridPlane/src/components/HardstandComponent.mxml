<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   width="{ hardstand.columns * hardstand.cellWidth }" height="{ hardstand.rows* hardstand.cellHeight }" 
				   dropShadowVisible="true" 
				   backgroundAlpha="0" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   click="bordercontainer1_clickHandler(event)" 
				   addedToStage="bordercontainer1_addedToStageHandler(event)" 
				   rollOut="bordercontainer1_rollOutHandler(event)" 
				   mouseMove="bordercontainer1_mouseMoveHandler(event)" 	
				   mouseDown="bordercontainer1_mouseDownHandler(event)" 
				   xmlns:layers="layers.*">
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import layers.PlaneLayer;
			
			import models.Hardstand;
			import models.Plane;
			
			import mx.core.UIComponent;
			
			[Inject]
			public var planeLayer:PlaneLayer;

			[Inject]
			[Bindable]
			public var hardstand:Hardstand;
			
			protected function bordercontainer1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}

			private var oldX:int;
			private var oldY:int;
			private var setMirror:Boolean = false;
			private var oldPoint:Point = new Point( -1, -1 );
			
			protected function bordercontainer1_mouseMoveHandler(event:MouseEvent = null):void
			{
				if ( planeLayer.flying ){
					var point:Point = getXY();
					
					//坐标值更改了
					if ( !point.equals( oldPoint ) ){
						oldPoint = point.clone() ;
						trace( "x = " + point.x + " y = " + point.y );
						//如果超出边界
						if ( isValid( point ) ){
							changeMirror();
							
							mirror.x = point.x * hardstand.cellWidth;
							mirror.y = point.y * hardstand.cellHeight;
							
							if ( mirror.visible == false )
								mirror.visible = true;
						}else{
							mirror.visible = false;
						}
					}
					
				} else {
					mirror.visible = false;
				}
			}
			
			//获取当前鼠标所在的位置 必须保证已有飞机了
			private function getXY():Point
			{
				var plane:Plane = planeLayer.plane;
				var x:int = (this.mouseX - plane.width * hardstand.cellWidth / 2) / hardstand.cellWidth;
				var y:int = (this.mouseY - plane.height * hardstand.cellHeight / 2) / hardstand.cellHeight;
				
				return new Point( x, y );
			}
			
			private function isValid( point:Point ) : Boolean
			{
				var ret:Boolean = false;
				var x:int = point.x, y:int = point.y;
				var plane:Plane = planeLayer.plane;
				
				//没有超出边界
				if ( ((x + plane.width) <= hardstand.columns) && ((y + plane.height) <= hardstand.rows) && x >= 0 && y >= 0 ){
					//没有和已有飞机叠加
					if ( hardstand.isValid( x,y, plane ) )
						ret = true;
				}
				
				return ret;
			}
			
			private function changeMirror( force:Boolean = false ) : void
			{
				if ( !setMirror || force ){
					setMirror = true;
					
					mirror.source = planeLayer.plane.getBitmap();
					
					bordercontainer1_mouseMoveHandler();
				}
			}

			private function cancelMirror():void
			{
				mirror.visible = false;
				setMirror = false;				
			}
			
			protected function bordercontainer1_addedToStageHandler(event:Event):void
			{
				dispatchEvent(new Event('configureIOC', true));
				
				planeLayer.addEventListener(Event.CANCEL, onPlaneCancel );
				planeLayer.addEventListener(Event.CHANGE, onPlaneChange );
				
				this.hardstand.addEventListener(Event.CHANGE, onHardstandChange );
				
				//this.stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown );	
			}
			
			private function onHardstandChange( event:Event ):void
			{
				repaint();
			}

			private var images:Array = [];
			//重绘战场
			public function repaint():void
			{
				trace("repaint planes : " + hardstand.planes.length);
				clear();
				
				for( var i:int = 0; i< hardstand.planes.length; i++ ){
					var plane:Plane = (hardstand.planes[i] as Plane);
					var image:Image = new Image();
					
					image.source = plane.getBitmap();
					image.x = plane.x * hardstand.cellWidth;
					image.y = plane.y * hardstand.cellHeight;
					
					images.push( image );
					
					this.addElement( image );
				}				
			}
			
			public function clear():void
			{
				for( var i:int = 0; i< images.length; i++ ){
					this.removeElement( images[ i ] );
				}
				images = [];
			}
			
			private function onPlaneCancel( event:Event ):void
			{
				cancelMirror();
			}

			private function onPlaneChange( event:Event ):void
			{
				mirror.visible = false;
				changeMirror( true );
			}
			
			protected function bordercontainer1_rollOutHandler(event:MouseEvent):void
			{
				mirror.visible = false;
				setMirror = false;
			}
			
			private function onKeyDown( event:KeyboardEvent ):void
			{

			}

			protected function bordercontainer1_mouseDownHandler(event:MouseEvent):void
			{
				trace( " bordercontainer1_mouseDownHandler click" );
				if ( planeLayer.flying ){
					var point:Point = getXY();
					if ( isValid( point ) ){
						hardstand.setPlane( point.x, point.y, planeLayer.plane );
						//取消显示飞机
						planeLayer.removePlane();
					}
				}
			}

		]]>
	</fx:Script>
	
    <s:BorderContainer backgroundColor="0x333333" backgroundAlpha="0.5"
					   width="{ hardstand.columns * hardstand.cellWidth}" height="{ hardstand.rows* hardstand.cellHeight }" />
	
	
	<layers:LineLayer width="100%" height="100%" cellHeight="{hardstand.cellHeight}" cellWidth="{hardstand.cellWidth}"
					 columns="{hardstand.columns}" rows="{hardstand.rows}" id="lineLayer" />
	
	<mx:Image id="mirror" alpha="0.5" visible="false" />
	
</s:BorderContainer>
